CREATE DATABASE company_repository;

CREATE TABLE company_storage.company_2
(
    id   INT PRIMARY KEY,
    name VARCHAR(128) UNIQUE,
    date DATE NOT NULL CHECK (date > '1995-01-01' AND DATE < '2020-01-01')
    --MOZNA TEZ W TAKI SPOSOB UNIQUE(name, date)
);

DROP TABLE company_2;

INSERT INTO company_2(id, name, date)
VALUES (1, 'Google', '2001-01-01'),
       (2, 'Apple', '2002-10-29'),
       (3, 'Facebook', '1998-10-05');

CREATE TABLE employee
(
    id         SERIAL PRIMARY KEY, --TYP SERIAL - AUTOMATYCZNA INKREMENTACJA
    --lepsze rozwiazanie id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY
    first_name VARCHAR(128) NOT NULL,
    last_name  VARCHAR(128) NOT NULL,
    salary     INT,
    UNIQUE (first_name, last_name)
);

DROP TABLE employee;

INSERT INTO employee (first_name, last_name, salary) --TERAZ ID TWORZONE AUTOMATYCZNIE OD 1
VALUES ('Ivan', 'Petrov', 2000),
       ('Ivan', 'Nikitin', 750),
       ('Kristina', 'Mironenko', 5000);


SELECT id,
       first_name f_name, --f_name jako alias dla nagłowka
       salary AS  sal     --inny sposob dac alias
FROM employee
ORDER BY first_name,
         salary --(sortowanie rosnąco) -najpierw sortowanie po imieniu, pozniej po salary jezeli imiona takie same
--ORDER BY salary DESC (MALEJĄCO)
LIMIT 3 OFFSET 1; --POMIN 1(OFFSET) I POKAZ TYLKO 3(LIMIT)


SELECT DISTINCT first_name f_name --tylko unikatowe
FROM employee;


INSERT INTO employee (first_name, last_name, salary)
VALUES ('Dzmitry', 'Nikitin', 12000);


SELECT id,
       first_name AS f_name,
       last_name,
       salary
FROM employee
WHERE salary > 1200
  AND first_name != 'Ivan' --filtracja
--WHERE salary BETWEEN 1000 AND 1500 -- pomiedzy tym a tym
--WHERE salary IN (1000, 1500, 2000) -- SALARY = TYM WARTOSCIOM
ORDER BY salary;


SELECT id,
       first_name AS f_name,
       last_name,
       salary
FROM employee
WHERE first_name LIKE 'Iv%'
  AND last_name ILIKE '%ov' --imie zaczyna sie z Iv a nazwisko konczy sie na ov
ORDER BY salary;

SELECT sum(salary) --avg(average), min, max
--upper/lower(first_name)
FROM employee;

SELECT count(*) --LICZY ILOSC LINIJEK W TABELE
FROM employee;


SELECT concat(first_name, ' ', last_name) AS fio --połaczenie kilka kolumn
    --lub to samo co first_name || ' ' last_name AS fio
FROM employee